class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode t1=head;
        ListNode t2=head.next;
        while(t2!=null ){
            if(t1.val==t2.val){
                while(t2!=null && t1.val==t2.val){
                    t2=t2.next;
                }
                if(t2==null){
                    t2=head;
                    if(head==t1){
                        return null;
                    }
                    while(t2.next!=t1){
                        t2=t2.next;
                    }
                    t2.next=null;
                    return head;
                }
                t1.val=t2.val;
                t1.next=t2.next;
                t2=t1.next;
                
            }else{
                t1=t1.next;
                t2=t2.next;
            }
            
            
            
        }
        return head;
       
    }
}
// brute force O(n)
same as above
class Solution {
public ListNode deleteDuplicates(ListNode head) {

    ListNode start = new ListNode(0, head);
    ListNode prev = start, curr = head; 
    
    while( curr != null && curr.next != null ){
        
        if( curr.val == curr.next.val ){
            
            while( curr != null && curr.next != null&& curr.val == curr.next.val ){
                 
                curr.next = curr.next.next; 
                
            }
            
            prev.next = curr.next ;
             curr = prev.next; 
        }else{
            
            prev = curr; 
            curr = curr.next; 
        }
        
    }
     
    return start.next;
     
}
}
//O(n)
